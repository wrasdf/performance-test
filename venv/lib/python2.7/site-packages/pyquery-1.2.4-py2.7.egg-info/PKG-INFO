Metadata-Version: 1.1
Name: pyquery
Version: 1.2.4
Summary: A jquery-like library for python
Home-page: https://github.com/gawel/pyquery
Author: Gael Pasgrimaud
Author-email: gael@gawel.org
License: BSD
Description: 
        pyquery: a jquery-like library for python
        =========================================
        
        pyquery allows you to make jquery queries on xml documents.
        The API is as much as possible the similar to jquery. pyquery uses lxml for fast
        xml and html manipulation.
        
        This is not (or at least not yet) a library to produce or interact with
        javascript code. I just liked the jquery API and I missed it in python so I
        told myself "Hey let's make jquery in python". This is the result.
        
        It can be used for many purposes, one idea that I might try in the future is to
        use it for templating with pure http templates that you modify using pyquery.
        I can also be used for web scrapping or for theming applications with
        `Deliverance`_.
        
        The `project`_ is being actively developped on a git repository on Github. I
        have the policy of giving push access to anyone who wants it and then to review
        what he does. So if you want to contribute just email me.
        
        Please report bugs on the `github
        <https://github.com/gawel/pyquery/issues>`_ issue
        tracker.
        
        .. _deliverance: http://www.gawel.org/weblog/en/2008/12/skinning-with-pyquery-and-deliverance
        .. _project: https://github.com/gawel/pyquery/
        
        Quickstart
        ==========
        
        You can use the PyQuery class to load an xml document from a string, a lxml
        document, from a file or from an url::
        
            >>> from pyquery import PyQuery as pq
            >>> from lxml import etree
            >>> import urllib
            >>> d = pq("<html></html>")
            >>> d = pq(etree.fromstring("<html></html>"))
            >>> d = pq(url='http://google.com/')
            >>> # d = pq(url='http://google.com/', opener=lambda url, **kw: urllib.urlopen(url).read())
            >>> d = pq(filename=path_to_html_file)
        
        Now d is like the $ in jquery::
        
            >>> d("#hello")
            [<p#hello.hello>]
            >>> p = d("#hello")
            >>> print(p.html())
            Hello world !
            >>> p.html("you know <a href='http://python.org/'>Python</a> rocks")
            [<p#hello.hello>]
            >>> print(p.html())
            you know <a href="http://python.org/">Python</a> rocks
            >>> print(p.text())
            you know Python rocks
        
        You can use some of the pseudo classes that are available in jQuery but that
        are not standard in css such as :first :last :even :odd :eq :lt :gt :checked
        :selected :file::
        
            >>> d('p:first')
            [<p#hello.hello>]
        
        
        
        See http://packages.python.org/pyquery/ for the full documentation
        
        News
        ====
        
        1.2.4
        -----
        
        Moved to github. So a few files are renamed from .txt to .rst
        
        Added .xhtml_to_html() and .remove_namespaces()
        
        Use requests to fetch urls (if available)
        
        Use restkit's proxy instead of Paste (which will die with py3)
        
        Allow to open https urls
        
        python2.5 is no longer supported (may work, but tests are broken)
        
        1.2.3
        -----
        
        Allow to pass this in .filter() callback
        
        Add .contents() .items()
        
        Add tox.ini
        
        Bug fixes: fix #35 #55 #64 #66
        
        1.2.2
        -----
        
        Fix cssselectpatch to match the newer implementation of cssselect. Fixes issue #62, #52 and #59 (Haoyu Bai)
        
        Fix issue #37 (Caleb Burns)
        
        1.2.1
        -----
        
        Allow to use a custom css translator.
        
        Fix issue 44: case problem with xml documents
        
        1.2
        ---
        
        PyQuery now use `cssselect <http://pypi.python.org/pypi/cssselect>`_. See issue
        43.
        
        Fix issue 40: forward .html() extra arguments to ``lxml.etree.tostring``
        
        1.1.1
        -----
        
        Minor release. Include test file so you can run tests from the tarball.
        
        
        1.1
        ---
        
        fix issues 30, 31, 32 - py3 improvements / webob 1.2+ support
        
        
        1.0
        ---
        
        fix issues 24
        
        0.7
        ---
        
        Python 3 compatible
        
        Add __unicode__ method
        
        Add root and encoding attribute
        
        fix issues 19, 20, 22, 23 
        
        0.6.1
        ------
        
        Move README.txt at package root
        
        Add CHANGES.txt and add it to long_description
        
        0.6
        ----
        
        Added PyQuery.outerHtml
        
        Added PyQuery.fn
        
        Added PyQuery.map
        
        Change PyQuery.each behavior to reflect jQuery api
        
        
        
        
        
Keywords: jquery html xml scraping
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
